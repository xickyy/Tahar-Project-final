{"ast":null,"code":"var _jsxFileName = \"/home/ricky/TaharGarage/garage-door-site/src/components/OpenModalButton/index.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useModal } from '../../context/Modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction OpenModalButton({\n  modalComponent,\n  // component to render inside the modal\n  buttonText,\n  // text of the button that opens the modal\n  onButtonClick,\n  // optional: callback function that will be called once the button that opens the modal is clicked\n  onModalClose // optional: callback function that will be called once the modal is closed\n}) {\n  _s();\n  const {\n    setModalContent,\n    setOnModalClose\n  } = useModal();\n  const onClick = () => {\n    if (onModalClose) setOnModalClose(onModalClose);\n    setModalContent(modalComponent);\n    if (onButtonClick) onButtonClick();\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onClick,\n    children: buttonText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_s(OpenModalButton, \"CYHkP+OX4/XADGVYFixIs9jJKu8=\", false, function () {\n  return [useModal];\n});\n_c = OpenModalButton;\nexport default OpenModalButton;\nvar _c;\n$RefreshReg$(_c, \"OpenModalButton\");","map":{"version":3,"names":["React","useModal","jsxDEV","_jsxDEV","OpenModalButton","modalComponent","buttonText","onButtonClick","onModalClose","_s","setModalContent","setOnModalClose","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ricky/TaharGarage/garage-door-site/src/components/OpenModalButton/index.js"],"sourcesContent":["import React from 'react';\nimport { useModal } from '../../context/Modal';\n\nfunction OpenModalButton({\n  modalComponent, // component to render inside the modal\n  buttonText, // text of the button that opens the modal\n  onButtonClick, // optional: callback function that will be called once the button that opens the modal is clicked\n  onModalClose // optional: callback function that will be called once the modal is closed\n}) {\n  const { setModalContent, setOnModalClose } = useModal();\n\n  const onClick = () => {\n    if (onModalClose) setOnModalClose(onModalClose);\n    setModalContent(modalComponent);\n    if (onButtonClick) onButtonClick();\n  };\n\n  return (\n    <button onClick={onClick}>{buttonText}</button>\n  );\n}\n\nexport default OpenModalButton;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,eAAeA,CAAC;EACvBC,cAAc;EAAE;EAChBC,UAAU;EAAE;EACZC,aAAa;EAAE;EACfC,YAAY,CAAC;AACf,CAAC,EAAE;EAAAC,EAAA;EACD,MAAM;IAAEC,eAAe;IAAEC;EAAgB,CAAC,GAAGV,QAAQ,CAAC,CAAC;EAEvD,MAAMW,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAIJ,YAAY,EAAEG,eAAe,CAACH,YAAY,CAAC;IAC/CE,eAAe,CAACL,cAAc,CAAC;IAC/B,IAAIE,aAAa,EAAEA,aAAa,CAAC,CAAC;EACpC,CAAC;EAED,oBACEJ,OAAA;IAAQS,OAAO,EAAEA,OAAQ;IAAAC,QAAA,EAAEP;EAAU;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AAEnD;AAACR,EAAA,CAjBQL,eAAe;EAAA,QAMuBH,QAAQ;AAAA;AAAAiB,EAAA,GAN9Cd,eAAe;AAmBxB,eAAeA,eAAe;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}